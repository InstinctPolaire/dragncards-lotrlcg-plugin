{
    "actionLists": {
        "newRound": [
            ["COND",
                ["EQUAL", "$GAME.playerData.$PLAYER_N.refreshed", false],
                ["ACTION_LIST", "refresh"]
            ],
            ["COND",
                ["EQUAL", "$PLAYER_N", "player1"],
                [
                    ["INCREASE_VAL", "/roundNumber", 1],
                    ["LOG", "{player1} increased the round."],
                    ["SET", "/phaseId", "Resource"],
                    ["LOG", "{player1} set the phase to Resource."],
                    ["SET", "/stepId", "1.R"],
                    ["LOG", "{player1} set the round step to 1.R."]
                ]
            ],
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID", [
                ["DEFINE", "$CURRENT_SIDE", "$CARD.currentSide"],
                ["COND",
                    ["AND",
                        ["EQUAL", "$CARD.sides.$CURRENT_SIDE.type", "Hero"],
                        ["EQUAL", "$CARD.controller", "$PLAYER_N"],
                        ["EQUAL", "$CARD.inPlay", true]
                    ],
                    [
                        ["INCREASE_VAL", "/cardById/$CARD_ID/tokens/resource", 1],
                        ["LOG", "$PLAYER_N", " added 1 resource token to ", ["FACEUP_NAME_FROM_CARD_ID", "$CARD_ID"], "."]
                    ]
                ],
                ["COND",
                    ["EQUAL", "$CARD.controller", "$PLAYER_N"],
                    ["SET", "/cardById/$CARD_ID/committed", false]
                ],
                ["COND",
                    ["AND",
                        ["EQUAL", "$CARD.controller", "$PLAYER_N"],
                        ["EQUAL", "$CARD.inPlay", true],
                        ["NOT_EQUAL", "$CARD.extraResources", null]
                    ],
                    [
                        ["INCREASE_VAL", "/cardById/$CARD_ID/tokens/resource", "$CARD.extraResources"],
                        ["LOG", "$PLAYER_N", " added ", ["OBJ_GET_VAL", "$CARD", "extraResources"]," extra resource token(s) to ", ["FACEUP_NAME_FROM_CARD_ID", "$CARD_ID"]]
                    ]
                ]
            ]],
            ["COND",
                ["EQUAL", "$GAME.playerData.$PLAYER_N.cardsDrawn", 1],
                [
                    ["DRAW_CARD"],
                    ["LOG", "$PLAYER_N", " drew 1 card."]
                ],
                true,
                [
                    ["DRAW_CARD", "$GAME.playerData.$PLAYER_N.cardsDrawn"],
                    ["LOG", "$PLAYER_N", " drew ", "$GAME.playerData.$PLAYER_N.cardsDrawn", " cards."]
                ]
            ],
            ["SET", "/playerData/$PLAYER_N/willpower", 0],
            ["SET", "/playerData/$PLAYER_N/refreshed", false]
        ],
        "refresh": [
            ["COND",
                ["EQUAL", "$PLAYER_N", "player1"],
                [
                    ["SET", "/stepId", "7.R"],
                    ["SET", "/firstPlayer", ["NEXT_PLAYER", "$GAME.firstPlayer"]],
                    ["LOG", "{player1} set the phase to Refresh."],
                    ["LOG", "{player1} set the round step to 7.R."]
                ]
            ],
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID", [
                ["COND",
                    ["AND",
                        ["EQUAL", "$CARD.controller", "$PLAYER_N"],
                        ["EQUAL", "$CARD.inPlay", true],
                        ["NOT_EQUAL", "$CARD.preventRefresh", true]
                    ],
                    [
                        ["SET", "/cardById/$CARD_ID/rotation", 0],
                        ["SET", "/cardById/$CARD_ID/exhausted", false],
                        ["SET", "/cardById/$CARD_ID/questing", false],
                        ["SET", "/cardById/$CARD_ID/tokens/questing", 0]
                    ]
                ]
            ]],
            ["ACTION_LIST", "increaseThreat"],
            ["SET", "/playerData/$PLAYER_N/refreshed", true],
            ["LOG", "$PLAYER_N", " refeshed."]
        ],
        "revealEncounterFaceup": [
            ["DEFINE", "$REVEAL_FACEDOWN", false],
            ["ACTION_LIST", "revealEncounter"]
        ],
        "revealEncounterFacedown": [
            ["DEFINE", "$REVEAL_FACEDOWN", true],
            ["ACTION_LIST", "revealEncounter"]
        ],
        "revealSecondaryFaceup": [
            ["DEFINE", "$REVEAL_FACEDOWN", false],
            ["ACTION_LIST", "revealSecondary"]
        ],
        "revealSecondaryFacedown": [
            ["DEFINE", "$REVEAL_FACEDOWN", true],
            ["ACTION_LIST", "revealSecondary"]
        ],
        "revealEncounter": [
            ["COND",
                ["EQUAL", ["LENGTH", "$GAME.groupById.sharedEncounterDeck.stackIds"], 0],
                ["COND",
                    ["EQUAL", "$GAME.phaseId", "Quest"],
                    [
                        ["MOVE_STACKS", "sharedEncounterDiscard", "sharedEncounterDeck", ["LENGTH", "$GAME.groupById.sharedEncounterDiscard.stackIds"], "shuffle"],
                        ["LOG", "$PLAYER_N"," shuffled the encounter discard pile into the encounter deck."]
                    ],
                    true,
                    ["LOG", "$PLAYER_N", "tried to reveal a card, but the encounter deck is empty and it's not the quest phase."]
                ],
                true,
                [
                    ["DEFINE", "$STACK_ID", "$GAME.groupById.sharedEncounterDeck.stackIds.[0]"],
                    ["MOVE_STACK", "$STACK_ID", "sharedStagingArea", -1],
                    ["COND",
                        "$REVEAL_FACEDOWN",
                        ["FOR_EACH_VAL", "$CARD_ID", "$GAME.stackById.$STACK_ID.cardIds", 
                            ["SET", "/cardById/$CARD_ID/currentSide", "B"]
                        ]
                    ],
                    ["LOG", "$PLAYER_N", " revealed ", ["FACEUP_NAME_FROM_STACK_ID", "$STACK_ID"], "."]
                ]
            ],
            ["COND",
                ["EQUAL", ["LENGTH", "$GAME.groupById.sharedEncounterDeck.stackIds"], 0],
                [
                    ["MOVE_STACKS", "sharedEncounterDiscard", "sharedEncounterDeck", ["LENGTH", "$GAME.groupById.sharedEncounterDiscard.stackIds"], "shuffle"],
                    ["LOG", "$PLAYER_N"," shuffled the encounter discard pile into the encounter deck."]
                ],
                true,
                "$GAME"
            ]
        ],
        "revealSecondary": [
            ["COND",
                ["EQUAL", ["LENGTH", "$GAME.groupById.sharedEncounterDeck2.stackIds"], 0],
                ["LOG", "$PLAYER_N", " tried to reveal a card from the second encounter deck, but it's empty."],
                true,
                [
                    ["DEFINE", "$CARD_ID", ["GET_CARD_ID", "sharedEncounterDeck2", 0, 0]],
                    ["MOVE_CARD", "$CARD_ID", "sharedStagingArea", -1, 0],
                    ["COND",
                        "$REVEAL_FACEDOWN",
                        ["SET", "/cardById/$CARD_ID/currentSide", "B"]
                    ],
                    ["LOG", "$PLAYER_N", " revealed ", ["FACEUP_NAME_FROM_STACK_ID", "$STACK_ID"], "."]
                ]
            ]
        ],
        "drawCard": [
            ["DRAW_CARD"],
            ["LOG", "$PLAYER_N", " drew 1 card."]
        ],
        "dealShadows": [
            ["DEFINE", "$STEP_ID", "6.2"],
            ["COND",
                ["AND", ["EQUAL", "$GAME.playerUi.playerN", "player1"], ["NOT_EQUAL", "$STEP_ID", "$GAME.stepId"]],
                [
                    ["SET", "/stepId", "$STEP_ID"],
                    ["LOG", "$PLAYER_N", " set the round step to ", "$GAME.steps.$STEP_ID.label", "."]
                ],
                true,
                "$GAME"
            ],
            ["FOR_EACH_KEY_VAL", "$PLAYER_I", "$PLAYER_ORDER", "$GAME.playerData", [
                ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID",
                    ["COND",
                        ["AND",
                            ["EQUAL", "$CARD.groupId", ["JOIN_STRING", "$PLAYER_I", "Engaged"]],
                            ["EQUAL", "$CARD.cardIndex", 0],
                            ["EQUAL", "$CARD.currentFace.type", "Enemy"]
                        ],
                        ["COND",
                            ["EQUAL", ["LENGTH", "$GAME.groupById.sharedEncounterDeck.stackIds"], 0],
                            [
                                ["LOG", "$PLAYER_N", " tried to deal a shadow card but the encounter deck is empty."]
                            ],
                            true,
                            [
                                ["DEFINE", "$SHADOW_CARD_ID", ["GET_CARD_ID", "sharedEncounterDeck", 0, 0]],
                                ["ATTACH_CARD", "$SHADOW_CARD_ID", "$CARD_ID"],
                                ["SET", "/cardById/$SHADOW_CARD_ID/rotation", -30],
                                ["SET", "/cardById/$SHADOW_CARD_ID/currentSide", "B"],
                                ["LOG", "$PLAYER_N", " dealt a shadow card to ", ["FACEUP_NAME_FROM_CARD_ID", "$CARD_ID"], "."]
                            ]
                        ]
                    ],
                    "/sides/A/engagementCost",
                    "DESC"
                ]
            ]]
        ],
        "discardShadows": [
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID",
            [
                ["COND",
                ["EQUAL", "$CARD.rotation", -30],
                ["ACTION_LIST", "discardCard", "$CARD_ID"]
                ]
            ]
            ]
        ],
        "mulligan": [
            ["DEFINE", "$HAND_GROUP_ID", ["JOIN_STRING", "$PLAYER_N", "Hand"]],
            ["DEFINE", "$DECK_GROUP_ID", ["JOIN_STRING", "$PLAYER_N", "Deck"]],
            ["DEFINE", "$HAND_SIZE", ["LENGTH", "$GAME.groupById.$HAND_GROUP_ID.stackIds"]],
            ["MOVE_STACKS", "$HAND_GROUP_ID", "$DECK_GROUP_ID", "$HAND_SIZE", "shuffle"],
            ["DRAW_CARD", "$HAND_SIZE"]
        ],
        "increaseThreat": [
            ["INCREASE_VAL", "/playerData/$PLAYER_N/threat", 1],
            ["LOG", "$PLAYER_N", " increased their threat by 1."]
        ],
        "increaseThreatAll": [
            ["FOR_EACH_KEY_VAL", "$PLAYER_I", "$PLAYER_I_DATA", "$GAME.playerData",
                ["INCREASE_VAL", "/playerData/$PLAYER_I/threat", 1]
            ],
            ["LOG", "$PLAYER_N", " increased each player's threat by 1."]
        ],
        "decreaseThreat": [
            ["INCREASE_VAL", "/playerData/$PLAYER_N/threat", -1],
            ["LOG", "$PLAYER_N", " decreased their threat by 1."]
        ],
        "decreaseThreatAll": [
            ["FOR_EACH_KEY_VAL", "$PLAYER_I", "$PLAYER_I_DATA", "$GAME.playerData",
                ["INCREASE_VAL", "/playerData/$PLAYER_I/threat", -1]
            ],
            ["LOG", "$PLAYER_N", " increased each player's threat by 1."]
        ],
        "drawNextSeat": [
            ["DEFINE", "$PLAYER_N", ["NEXT_PLAYER", "$PLAYER_N"]],
            ["LOG", "$PLAYER_N", " drew 1 card."],
            ["DRAW_CARD"]
        ],
        "zeroTokens": [
            ["SET", "/cardById/$ACTIVE_CARD_ID/tokens", {}],
            ["LOG", "$PLAYER_N", " removed all tokens from ", "$ACTIVE_FACE.name", "."]
        ],
        "toggleExhaust": [
            ["COND",
                ["EQUAL", "$ACTIVE_FACE.type", "Location"],
                [
                    ["LOG", "$PLAYER_N", " made ", "$ACTIVE_FACE.name", " active."],
                    ["MOVE_CARD", "$ACTIVE_CARD_ID", "sharedActiveLocation", 0]
                ],
                ["AND", ["EQUAL", "$ACTIVE_CARD.rotation", 90], "$ACTIVE_CARD.inPlay"],
                [
                    ["LOG", "$PLAYER_N", " readied ", "$ACTIVE_FACE.name", "."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/rotation", 0],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/exhausted", false]
                ],
                ["AND", ["EQUAL", "$ACTIVE_CARD.rotation", 0], "$ACTIVE_CARD.inPlay"],
                [
                    ["LOG", "$PLAYER_N", " exhausted ", "$ACTIVE_FACE.name", "."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/rotation", 90],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/exhausted", true]
                ]
            ]
        ],
        "flipCard": [
            ["COND",
                ["EQUAL", "$ACTIVE_CARD.currentSide", "A"],
                [
                    ["LOG", "$PLAYER_N", " flipped ", "$ACTIVE_FACE.name", " facedown."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/currentSide", "B"]    
                ],
                true,
                [
                    ["SET", "/cardById/$ACTIVE_CARD_ID/currentSide", "A"],
                    ["LOG", "$PLAYER_N", " flipped ", "$ACTIVE_FACE.name", " faceup."]
                ]
            ]
        ],
        "toggleCommit": [
            ["ACTION_LIST", "toggleCommitWithoutExhausting"],
            ["COND",
                ["AND", "$ACTIVE_CARD.committed", "$ACTIVE_CARD.inPlay", ["NOT", "$ACTIVE_CARD.exhausted"]],
                ["ACTION_LIST", "toggleExhaust"],
                ["AND", ["NOT", "$ACTIVE_CARD.committed"], "$ACTIVE_CARD.inPlay", "$ACTIVE_CARD.exhausted"],
                ["ACTION_LIST", "toggleExhaust"]
            ]
        ],
        "toggleCommitWithoutExhausting": [
            ["DEFINE", "$STEP_ID", "3.2"],
            ["COND",
                ["AND", ["EQUAL", "$PLAYER_N", "player1"], ["NOT_EQUAL", "$GAME.stepId", "$STEP_ID"]],
                [
                    ["SET", "/stepId", "$STEP_ID"],
                    ["LOG", "$PLAYER_N", " set the round step to ", "$GAME.steps.$STEP_ID.label", "."]
                ]
            ],
            ["COND",
                ["AND", ["EQUAL", "$ACTIVE_CARD.committed", false], "$ACTIVE_CARD.inPlay"],
                [
                    ["DEFINE", "$QUESTING_STAT", "$GAME.questingStat"],
                    ["DEFINE", "$QUESTING_AMOUNT", ["ADD", "$ACTIVE_FACE.$QUESTING_STAT", "$ACTIVE_CARD.tokens.$QUESTING_STAT"]],
                    ["LOG", "$PLAYER_N", " committed ", "$ACTIVE_FACE.name", " (", "$QUESTING_AMOUNT", ") to the quest."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/committed", true],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/tokens/questing", "$QUESTING_AMOUNT"],
                    ["INCREASE_VAL", "/playerData/$ACTIVE_CARD.controller/willpower", "$QUESTING_AMOUNT"]
                ],
                ["AND", ["EQUAL", "$ACTIVE_CARD.committed", true], "$ACTIVE_CARD.inPlay"],
                [
                    ["DEFINE", "$QUESTING_AMOUNT", "$ACTIVE_CARD.tokens.questing"],
                    ["LOG", "$PLAYER_N", " removed ", "$ACTIVE_FACE.name", " (", "$QUESTING_AMOUNT", ") to the quest."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/committed", false],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/tokens/questing", 0],
                    ["DECREASE_VAL", "/playerData/$ACTIVE_CARD.controller/willpower", "$QUESTING_AMOUNT"]
                ]
            ]
        ],
        "dealShadow": [
            ["COND",
                "$ACTIVE_CARD.inPlay",
                ["COND",
                    ["EQUAL", ["LENGTH", "$GAME.groupById.sharedEncounterDeck.stackIds"], 0],
                    ["LOG", "$PLAYER_N", " tried to deal a shadow card but the encounter deck is empty."],
                    true,
                    [
                        ["DEFINE", "$SHADOW_CARD_ID", ["GET_CARD_ID", "sharedEncounterDeck", 0, 0]],
                        ["ATTACH_CARD", "$SHADOW_CARD_ID", "$ACTIVE_CARD_ID"],
                        ["SET", "/cardById/$SHADOW_CARD_ID/rotation", -30],
                        ["SET", "/cardById/$SHADOW_CARD_ID/currentSide", "B"],
                        ["LOG", "$PLAYER_N", " dealt a shadow card to ", "$ACTIVE_FACE.name", "."]
                    ]
                ]
            ]
        ],
        "targetCard": [
            ["SET", "/cardById/$ACTIVE_CARD_ID/targeting", "$PLAYER_N", true],
            ["LOG", "$PLAYER_N", " targeted ", "$ACTIVE_FACE.name", "."]
        ],
        "addToVictoryDisplay": [
            ["MOVE_CARD", "$ACTIVE_CARD_ID", "sharedVictory", 0],
            ["LOG", "$PLAYER_N", " added ", "$ACTIVE_FACE.name", " to the victory display."]
        ],
        "discardCard": [
            ["COND",
                ["EQUAL", "$ACTIVE_CARD.cardIndex", 0],
                [
                    ["DEFINE", "$STACK_ID", ["GET_STACK_ID", "$ACTIVE_CARD.groupId", "$ACTIVE_CARD.stackIndex"]],
                    ["DEFINE", "$CARD_IDS", "$GAME.stackById.$STACK_ID.cardIds"],
                    ["FOR_EACH_VAL", "$CARD_ID", "$CARD_IDS",
                        [
                            ["DEFINE", "$CARD", "$GAME.cardById.$CARD_ID"],
                            ["COND",
                                ["EQUAL", "$CARD.discardGroupId", null],
                                ["LOG", "$PLAYER_N", " failed to discard ", "$CARD.currentFace.name", " because it is not associated with a discard pile. Please drag the card instead."],
                                true,
                                [
                                    ["DEFINE", "$CURRENT_SIDE", "$CARD.currentSide"],
                                    ["LOG", "$PLAYER_N", " discarded ", "$CARD.currentFace.name", "."],
                                    ["MOVE_CARD", "$CARD_ID", "$CARD.discardGroupId", 0]
                                ]
                            ]
                        ]
                    ]
                ],
                true,
                [
                    ["COND",
                        ["EQUAL", "$ACTIVE_CARD.discardGroupId", null],
                        ["LOG", "$PLAYER_N", " failed to discard ", "$ACTIVE_FACE.name", " because it is not associated with a discard pile. Please drag the card instead."],
                        true,
                        [
                            ["LOG", "$PLAYER_N", " discarded ", "$ACTIVE_FACE.name", "."],
                            ["MOVE_CARD", "$ACTIVE_CARD_ID", "$ACTIVE_CARD.discardGroupId", 0]
                        ]
                    ]
                ]
            ],
            ["COND",
                ["EQUAL", "$ACTIVE_CARD.currentFace.type", "Quest"],
                ["COND", 
                    ["EQUAL", ["LENGTH", "$GAME.groupById.sharedQuestDeck.stackIds"], 0],
                    ["LOG", "The players won the game!"],
                    true,
                    [
                        ["MOVE_STACK", ["GET_STACK_ID", "sharedQuestDeck", 0], "sharedMainQuest", 0],
                        ["LOG", "$PLAYER_N", " advanced the quest."]
                    ]
                ]
            ]
        ],
        "shuffleIntoDeck": [
            ["MOVE_CARD", "$ACTIVE_CARD_ID", "$ACTIVE_CARD.deckGroupId", 0],
            ["DEFINE", "$GROUP_ID", "$ACTIVE_CARD.deckGroupId"],
            ["SHUFFLE_GROUP", "$GROUP_ID"],
            ["LOG", "$PLAYER_N", " shuffled ", "$ACTIVE_FACE.name", " into ", "$GAME.groupById.$GROUP_ID.name", "."]
        ],
        "detach": [
            ["COND",
                ["GREATER_THAN", "$ACTIVE_CARD.cardIndex", 0],
                [
                    ["MOVE_CARD", "$ACTIVE_CARD_ID", "$ACTIVE_CARD.groupId", ["ADD", "$ACTIVE_CARD.stackIndex", 1]],
                    ["LOG", "$PLAYER_N", " detached ", "$ACTIVE_FACE.name", "."]
                ]
            ]
        ],
        "swapSide": [
            ["COND",
                ["GREATER_THAN", "$ACTIVE_CARD.cardIndex", 0],
                ["COND",
                    ["EQUAL", "$ACTIVE_CARD.attachmentDirection", -1],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/attachmentDirection", 1],
                    true,
                    ["SET", "/cardById/$ACTIVE_CARD_ID/attachmentDirection", -1]
                ]
            ]
        ],
        "swapWithTop": [
            ["DEFINE", "$ORIG_GROUP_ID", "$ACTIVE_CARD.groupId"],
            ["DEFINE", "$DECK_GROUP_ID", "$ACTIVE_CARD.deckGroupId"],
            ["DEFINE", "$TOP_STACK_ID", "$GAME.groupById.$DECK_GROUP_ID.stackIds.[0]"],
            ["DEFINE", "$TOP_CARD_ID", "$GAME.stackById.$TOP_STACK_ID.cardIds.[0]"],
            ["DEFINE", "$TOP_CARD", "$GAME.cardById.$TOP_CARD_ID"],
            ["DEFINE", "$ACTIVE_STACK_INDEX", "$ACTIVE_CARD.stackIndex"],
            ["DEFINE", "$ACTIVE_CARD_INDEX", "$ACTIVE_CARD.cardIndex"],
            ["MOVE_CARD", "$ACTIVE_CARD_ID", "$TOP_CARD.deckGroupId", "$TOP_CARD.stackIndex", "$TOP_CARD.cardIndex"],
            ["MOVE_CARD", "$TOP_CARD_ID", "$ORIG_GROUP_ID", "$ACTIVE_STACK_INDEX", "$ACTIVE_CARD_INDEX"],
            ["LOG", "$PLAYER_N", " swapped ", ["FACEUP_NAME_FROM_CARD_ID", "$ACTIVE_CARD_ID"], " with the top card of ", "$GAME.groupById.$DECK_GROUP_ID.label", "."]
        ],
        "moveToBack": [
            ["MOVE_CARD", "$ACTIVE_CARD_ID", "$ACTIVE_CARD.groupId", "$ACTIVE_CARD.stackIndex", -1]
        ],
        "setCardsDrawn": [
            ["INPUT", "integer", "$VAL", "Set the number of cards drawn during resource phase:", 1],
            ["SET", "/playerData/$PLAYER_N/cardsDrawn", "$VAL"],
            ["LOG", "$PLAYER_N", " set number of cards drawn during the Resource Phase to ", "$VAL", "."]
        ],
        "setQuestNormal": [
            ["SET", "/questingStat", "willpower"],
            ["LOG", "$PLAYER_N", " set the questing type to Normal."]
        ],
        "setQuestBattle": [
            ["SET", "/questingStat", "attack"],
            ["LOG", "$PLAYER_N", " set the questing type to Battle."]
        ],
        "setQuestSiege": [
            ["SET", "/questingStat", "defense"],
            ["LOG", "$PLAYER_N", " set the questing type to Siege."]
        ],
        "setupEscapeFromMountGram": [
            ["CONFIRM", "This function will set up each player's capture deck, add 2 resources to each hero, draw a new starting hands of 3 cards, and set new threat levels. Before running this function, each player should flip each hero they control that is not their starting hero facedown. Continue?"],
            ["FOR_EACH_KEY_VAL", "$PLAYER_I", "$PLAYER_I_DATA", "$GAME.playerData",
            [
                ["MOVE_STACKS", ["JOIN_STRING", "$PLAYER_I", "Hand"], ["JOIN_STRING", "$PLAYER_I", "Deck"], "$HAND_SIZE", "shuffle"],
                ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID", [
                    ["COND",
                        ["AND",
                        ["EQUAL", "$CARD.controller", "$PLAYER_I"],
                        ["EQUAL", "$CARD.groupId", ["JOIN_STRING", "$PLAYER_I", "Deck"]],
                        ["OR",
                            ["EQUAL", "$CARD.sides.A.type", "Ally"],
                            ["IN_STRING", "$CARD.sides.A.traits", "Item."],
                            ["IN_STRING", "$CARD.sides.A.traits", "Mount."],
                            ["IN_STRING", "$CARD.sides.A.traits", "Artifact."]
                        ]
                        ],
                        ["MOVE_CARD", "$CARD_ID", ["JOIN_STRING", "$PLAYER_I", "Deck2"], 0]
                    ]
                ]]
            ],
            ["DEFINE", "$FACEDOWN_HEROES", ["LIST"]],
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID", [
                ["COND",
                ["AND",
                    ["EQUAL", "$CARD.controller", "$PLAYER_I"],
                    ["EQUAL", "$CARD.sides.A.type", "Hero"],
                    ["EQUAL", "$CARD.currentSide", "B"]
                ],
                ["APPEND", "$FACEDOWN_HEROES", "$CARD"]
                ]
            ]],
            ["DEFINE", "$HERO_INDEX", ["RANDOM_INT", 0, ["SUBTRACT", ["LENGTH", "$FACEDOWN_HEROES"], 1]]],
            ["DEFINE", "$SET_ASIDE_HERO", ["AT_INDEX", "$FACEDOWN_HEROES", "$HERO_INDEX"]],
            ["FOR_EACH_START_STOP_STEP", "$i", 0, ["LENGTH", "$FACEDOWN_HEROES"], 1,
                [
                "COND",
                ["NOT", ["EQUAL", "$i", "$HERO_INDEX"]],
                [
                    ["DEFINE", "$CARD", ["AT_INDEX", "$FACEDOWN_HEROES", "$i"]],
                    ["MOVE_CARD", "$CARD.id", ["JOIN_STRING", "$PLAYER_I", "Deck2"], 0]
                ]
                ]
            ],
            ["SHUFFLE_GROUP", ["JOIN_STRING", "$PLAYER_I", "Deck2"]],
            ["DEFINE", "$CARD", ["AT_INDEX", "$FACEDOWN_HEROES", "$HERO_INDEX"]],
            ["MOVE_CARD", "$CARD.id", ["JOIN_STRING", "$PLAYER_I", "Deck2"], 0],
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID", [
                ["COND",
                ["AND",
                    ["EQUAL", "$CARD.controller", "$PLAYER_I"],
                    ["EQUAL", "$CARD.sides.A.type", "Hero"],
                    ["EQUAL", "$CARD.currentSide", "A"]
                ],
                ["INCREASE_VAL", "/playerData/$PLAYER_I/threat", "$CARD.sides.A.cost"]
                ]
            ]],
            ["ACTION_LIST", "drawCard", null, ["NEXT_PLAYER", "$PLAYER_I"]],
            ["FOR_EACH_KEY_VAL", "$CARD_ID", "$CARD", "$CARD_BY_ID", [
                ["COND",
                ["AND",
                    ["EQUAL", "$CARD.sides.A.type", "Hero"],
                    ["EQUAL", "$CARD.controller", "$PLAYER_I"],
                    ["EQUAL", "$CARD.inPlay", true]
                ],
                ["INCREASE_VAL", "/cardById/$CARD_ID/tokens/resource", 2]
                ]
            ]]
            ],
            ["LOG", "Complete! Players can find their capture decks under View > Player X > Player X Deck 2."]
        ],
        "setupToCatchAnOrc": [
            ["CONFIRM", "This function will set up each player's capture deck, add 2 resources to each hero, draw new starting hands of 3 cards, and set new threat levels. Before running this function, each player should flip each hero they control that is not their starting hero facedown. Continue?"]
        ],
        "togglePreventRefresh": [
            ["COND",
                ["EQUAL", "$ACTIVE_CARD.preventRefresh", true],
                [
                    ["LOG", "$PLAYER_N", " unlocked ", "$ACTIVE_FACE.name", "."],
                    ["SET", "/cardById/$ACTIVE_CARD_ID/preventRefresh", false]
                ],
                true,
                [
                    ["SET", "/cardById/$ACTIVE_CARD_ID/preventRefresh", true],
                    ["LOG", "$PLAYER_N", " preventRefresh ", "$ACTIVE_FACE.name", "."]
                ]
            ]
        ]
    }
}